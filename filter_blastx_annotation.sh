#!/bin/sh

#remove all contigs with query coverage <80%
#the query coverage column is column number 13
#in a blastx search, the percentages are actually divided by 3, since you're searching a nucleotide query against a protein database
#so the maximum you can get is 33% coverage
#we're gonna remove things that have less than 27% coverage

annotationdir="/home/aubkme/Pinfish_Transcriptome/new_feb_2021_trimmomatic/annotation/" #directory that you want to work in, contains your annotation files
blastfile="blastx_pin_v_s_aurata_27feb21.blast" #file with raw blast output in outfmt 6, generated by blastx-ing your transcriptome to a protein database from ensembl
multiple_matches="filtered_multiple_matches_27feb21_pin_s_aurata.temp" #temporary file, contains a list of only blast hits with coverage > 80%; this removes blast hits where maybe the match was really good, but only for a short portion of the transcript; this file is still in blast outfmt 6
annotated_transcripts="annotated_transcript_list.txt" #contains a list of all the transcript names that have annotations in $outfile, doesn't have duplicate names
one_annotation_per_transcript="final_10mar21_pin_s_aurata.blast" #filtered blast results with only one annotation per transcript; this file is still in blast outfmt 6
fasta_transcriptome="cdhit_trinityids_only_copy.fa" #copy of your original unannotated transcriptome file, make sure this is a copy because you're gonna use sed to edit it in place
ids="trinity_and_ensembl_transcript_ids.csv" 
annotation_information="/home/aubkme/Pinfish_Transcriptome/new_feb_2021_trimmomatic/annotation/s_aurata_db/sparus_aurata_ensembl_ids_w_gene_info.csv"
trinity_ensembl_genename="trinity_id_ensembl_id_gene_name.csv"

#move into the directory that contains your annotation file
cd $annotationdir

#filter these results as described above
cat $blastfile | awk '$13 > 26 {print $0}' | awk '$3 >= 75 {print $0}' > $multiple_matches

#get a list of all the transcript IDs with annotations in your filtered file
#first, just isolate column 1 (the transcript IDs) from the output file, then remove duplicates
cat $multiple_matches | awk '{print $1}' | uniq > $annotated_transcripts

#filter blast results further to get only one annotation per gene
#for every transcript ID in your annotated_transcripts file, search for the full name followed by a space in the multiple_matches blast results file
for transcript in `cat $annotated_transcripts`
do
    egrep "$transcript\s" $multiple_matches > temp.txt
    sort -nr -k 3 temp.txt > sorted.txt
    head -1 sorted.txt >> $one_annotation_per_transcript
    rm temp.txt
    rm sorted.txt
done

#get a txt file of ONLY trinity ids and their associated ENSSAUT ids
cat $one_annotation_per_transcript | awk '{print $1,$2}' | sed 's/[|]/ /g' | awk '{print $1,$3}' | sed 's/ /,/g' > $ids 

#add gene ids to the csv file that contains trinity id and linked ensembl id
for line in `cat $ids`
do
	ENSSAUT=`echo "$line" | awk -F, '{print $2}'`
	gene_name=`grep -m1 $ENSSAUT $annotation_information | awk -F, '{print $3}'`
	echo "$line,$gene_name" >> $trinity_ensembl_genename
done

for line in `cat $trinity_ensembl_genename`
do
	trinity=`echo "$line" | awk -F, '{print $1}'`
	sed -i "s/$trinity$/$line/" $fasta_transcriptome
done



